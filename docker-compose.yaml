services:
  cloudsql-proxy:
    image: gcr.io/cloudsql-docker/gce-proxy:1.33.1
    container_name: cloudsql-proxy
    command: >
      /cloud_sql_proxy
      -instances=${GCP_PROJECT_ID}:${GCP_REGION}:${CLOUDSQL_INSTANCE_ID}=tcp:0.0.0.0:5433
      -credential_file=/run/secrets/google_service_account_key
    secrets:
      - google_service_account_key
    restart: "no"

  redis:
    image: redis:6
    container_name: airflow_redis
    restart: always

  postgres:
    image: postgres:15
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
    restart: always

  airflow-init:
    build: .
    container_name: airflow_init
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      cloudsql-proxy:
        condition: service_started
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      PYTHONPATH: /opt/airflow
      GOOGLE_APPLICATION_CREDENTIALS: /run/secrets/google_service_account_key
      GCS_BUCKET: bank-raw-daily-ingest
      AIRFLOW_CONN_METADATA_DB: ${AIRFLOW_CONN_METADATA_DB}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
    secrets:
      - google_service_account_key
    entrypoint:
      - bash
      - -c
      - |
        airflow db init &&
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
    restart: "no"

  webserver:
    build: .
    container_name: airflow_webserver
    depends_on:
      - airflow-init
      - postgres
      - redis
      - cloudsql-proxy
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__WEBSERVER__WEB_SERVER_HOST: "0.0.0.0"
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "8080"
      AIRFLOW__WEBSERVER__BASE_URL: http://localhost:8080
      PYTHONPATH: /opt/airflow
      GOOGLE_APPLICATION_CREDENTIALS: /run/secrets/google_service_account_key
      GCS_BUCKET: bank-raw-daily-ingest
      AIRFLOW_CONN_METADATA_DB: ${AIRFLOW_CONN_METADATA_DB}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
    secrets:
      - google_service_account_key
    command: webserver
    restart: always

  scheduler:
    build: .
    container_name: airflow_scheduler
    depends_on:
      - webserver
      - cloudsql-proxy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      PYTHONPATH: /opt/airflow
      GOOGLE_APPLICATION_CREDENTIALS: /run/secrets/google_service_account_key
      GCS_BUCKET: bank-raw-daily-ingest
      AIRFLOW_CONN_METADATA_DB: ${AIRFLOW_CONN_METADATA_DB}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
    secrets:
      - google_service_account_key
    command: scheduler
    restart: always

  worker:
    build: .
    container_name: airflow_worker
    depends_on:
      - scheduler
      - postgres
      - redis
      - cloudsql-proxy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      PYTHONPATH: /opt/airflow
      GOOGLE_APPLICATION_CREDENTIALS: /run/secrets/google_service_account_key
      GCS_BUCKET: bank-raw-daily-ingest
      AIRFLOW_CONN_METADATA_DB: ${AIRFLOW_CONN_METADATA_DB}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
    secrets:
      - google_service_account_key
    command: celery worker
    restart: always

  flower:
    build: .
    container_name: airflow_flower
    depends_on:
      - redis
      - postgres
      - cloudsql-proxy
    ports:
      - "5555:5555"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      PYTHONPATH: /opt/airflow
      GOOGLE_APPLICATION_CREDENTIALS: /run/secrets/google_service_account_key
      GCS_BUCKET: bank-raw-daily-ingest
      AIRFLOW_CONN_METADATA_DB: ${AIRFLOW_CONN_METADATA_DB}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
    secrets:
      - google_service_account_key
    command: celery flower
    restart: always

secrets:
  google_service_account_key:
    file: google-service-account-key.json
